{"version":3,"sources":["../../../js/dialogs/NewObjectDialog.jsx"],"names":["GenericDialog","props","state","handleSubmit","bind","handleChange","reuse","inputFields","schema","properties","x","eval","localeCompare","push","dialog","id","title","JSON","stringify","event","setState","$","target","data","value","preventDefault","console","debug","db","PouchDB","post","err","doc","error","next","Dialog"],"mappings":"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","file":"NewObjectDialog.js","sourcesContent":["/**\n * @ToDo Should split the reuse functionality into another component\n */\nclass GenericDialog extends Dialog{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    render() {\n        let reuse = null;\n        if(this.props.reuse){\n            reuse = <div role=\"tabpanel\" className=\"tab-pane\" id=\"reuse\">\n                <p>reuse</p>\n            </div>;\n        }\n\n        let inputFields = [];\n        let props = this.props.schema.properties;\n\n        //inputFields.push(<p key={\"label\"}>Create a new {this.props.schema.title}</p>)\n\n        //@Todo this needs to support enumerations as well as objects\n        for(let x in props){\n            if(eval(\"props.\"+x+\".type\").localeCompare(\"string\")==0) {\n                inputFields.push(<div key={x}><label htmlFor={\"input\" + x}>{x}</label><input type=\"text\"\n                                                                                             onChange={this.handleChange}\n                                                                                             className=\"form-control\"\n                                                                                             placeholder={\"input \" + x}\n                                                                                             id={\"input\" + x}\n                                                                                             data-title={x}/></div>);\n            }\n            else{\n                inputFields.push(<div key={x}>\n                    <label htmlFor={\"input\" + x}>{x}</label>\n                    <GenericObjectLister id={\"input\"+x} field={x} onValueChange={this.handleChange}/>\n                </div>);\n            }\n        }\n\n        let dialog = <div id={this.props.id} title={this.props.title}>\n            <div>\n                <form action=\"#\" onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        {inputFields}\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n                </form>\n                <pre>{JSON.stringify(this.props.schema)}</pre>\n            </div>\n        </div>;\n\n        return dialog;\n    }\n\n    /**\n     * Updates React State, based on the data attribute set on the input box.\n     * @param event\n     */\n    handleChange(event){\n        this.setState({\n            [$(\"#\"+event.target.id).data(\"title\")]:event.target.value\n        });\n    }\n\n    /**\n     * Saves the object to the database\n     * @param event\n     * @ToDo validate state against the JSON Schema object and respond accordingly\n     */\n    handleSubmit(event){\n        event.preventDefault();\n\n        console.debug(\"Saving \"+this.props.schema.title+\" with \"+JSON.stringify(this.state));\n\n        let db = new PouchDB(this.props.schema.title);\n\n        db.post(this.state, function(err,doc){\n            if(err){\n                console.error(err);\n            }\n            else {\n                $(\"#dialog\" + this.props.schema.title).dialog(\"close\");\n            }\n\n\n            this.setState();\n\n            //If a next action is specified then execute, passing the schema object forward\n            if(this.props.next)\n                this.props.next(this.props.schema);\n\n        }.bind(this));\n    }\n}"]}
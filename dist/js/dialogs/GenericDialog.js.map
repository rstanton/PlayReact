{"version":3,"sources":["../../../js/dialogs/GenericDialog.jsx"],"names":["GenericDialog","props","state","handleSubmit","bind","handleChange","reuse","inputFields","schema","properties","push","title","x","dialog","id","body","JSON","stringify","event","setState","$","target","data","value","preventDefault","console","debug","db","PouchDB","post","err","doc","error","_id","next","Dialog"],"mappings":"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","file":"GenericDialog.js","sourcesContent":["/**\n * @ToDo Should split the reuse functionality into another component\n */\nclass GenericDialog extends Dialog{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    render() {\n        let reuse = null;\n        if(this.props.reuse){\n            reuse = <div role=\"tabpanel\" className=\"tab-pane\" id=\"reuse\">\n                <p>reuse</p>\n            </div>;\n        }\n\n        let inputFields = [];\n        let props = this.props.schema.properties;\n\n        inputFields.push(<p key={\"label\"}>Create a new {this.props.schema.title}</p>)\n\n        for(let x in props){\n            inputFields.push(<div key={x}><label htmlFor={\"input\"+x}>{x}</label><input type=\"text\" onChange={this.handleChange} className=\"form-control\" placeholder={\"input \"+x} id={\"input\"+x} data-title={x}/></div>);\n        }\n\n        let dialog = <div id={this.props.id}>\n            <p>{this.props.body}</p>\n            <div>\n                <ul className=\"nav nav-tabs\" role=\"tablist\">\n                    <li role=\"presentation\" className=\"active\"><a href=\"#new\" aria-controls=\"home\" role=\"tab\" data-toggle=\"tab\">New</a></li>\n                    {reuse!=null &&\n                    <li role=\"presentation\"><a href=\"#reuse\" aria-controls=\"profile\" role=\"tab\" data-toggle=\"tab\">Existing</a></li>\n                    }\n                </ul>\n\n                <div className=\"tab-content\">\n                    <div role=\"tabpanel\" className=\"tab-pane active\" id=\"new\">\n                        <form action=\"#\" onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                {inputFields}\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n                        </form>\n                        <pre>{JSON.stringify(this.props.schema)}</pre>\n                    </div>\n                    {reuse}\n                </div>\n            </div>\n        </div>;\n\n        return dialog;\n    }\n\n    /**\n     * Updates React State, based on the data attribute set on the input box.\n     * @param event\n     */\n    handleChange(event){\n        this.setState({\n            [$(\"#\"+event.target.id).data(\"title\")]:event.target.value\n        });\n    }\n\n    /**\n     * Saves the object to the database\n     * @param event\n     * @ToDo validate state against the JSON Schema object and respond accordingly\n     */\n    handleSubmit(event){\n        event.preventDefault();\n\n        console.debug(\"Saving \"+this.props.schema.title+\" with \"+JSON.stringify(this.state));\n\n        let db = new PouchDB(this.props.schema.title);\n\n        db.post(this.state, function(err,doc){\n            if(err){\n                console.error(err);\n            }\n            else {\n                $(\"#dialog\" + this.props.schema._id).dialog(\"close\");\n            }\n\n\n            this.setState();\n\n            //If a next action is specified then execute, passing the schema object forward\n            if(this.props.next)\n                this.props.next(this.props.schema);\n\n        }.bind(this));\n    }\n}"]}
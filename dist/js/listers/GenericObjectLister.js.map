{"version":3,"sources":["../../../js/listers/GenericObjectLister.jsx"],"names":["GenericObjectLister","props","getData","bind","componentDidMount","state","list","db","PouchDB","SCHEMA_DB","query","SCHEMA_VIEW","err","res","console","error","debug","JSON","stringify","rows","map","row","key","push","title","setState","React","Component"],"mappings":";;;;;;;;;;AAAA;;;IAGMA,mB;;;AACF,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA,8IACTA,KADS;;AAGf,cAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,OAAf;AACA,cAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,OAAzB;;AAEA,cAAKE,KAAL,GAAa;AACTC,kBAAM;AADG,SAAb;AANe;AASlB;;;;4CAEkB;AACf,iBAAKJ,OAAL;AACH;;;iCAEO;AACJ,mBAAO;AAAA;AAAA,kBAAK,WAAU,UAAf;AACH;AAAA;AAAA,sBAAQ,WAAU,iCAAlB,EAAoD,MAAK,QAAzD,EAAkE,IAAG,eAArE,EAAqF,eAAY,UAAjG,EAA4G,iBAAc,MAA1H,EAAiI,iBAAc,MAA/I;AAAA;AAEI,kDAAM,WAAU,OAAhB;AAFJ,iBADG;AAKH;AAAA;AAAA,sBAAI,WAAU,eAAd,EAA8B,mBAAgB,eAA9C;AACK,yBAAKG,KAAL,CAAWC;AADhB;AALG,aAAP;AASH;;;kCAEQ;AACL,gBAAIC,KAAK,IAAIC,OAAJ,CAAYC,SAAZ,CAAT;;AAEAF,eAAGG,KAAH,CAASC,WAAT,EAAsB,UAASC,GAAT,EAAcC,GAAd,EAAkB;AACpC,oBAAGD,GAAH,EACIE,QAAQC,KAAR,CAAcH,GAAd,EADJ,KAEK;AACDE,4BAAQE,KAAR,CAAc,+BAA6BC,KAAKC,SAAL,CAAeL,GAAf,CAA3C;AACA,wBAAIP,OAAO,EAAX;AACAO,wBAAIM,IAAJ,CAASC,GAAT,CAAa,UAAUC,GAAV,EAAe;AACxBP,gCAAQE,KAAR,CAAc,gCAAgCC,KAAKC,SAAL,CAAeG,IAAIC,GAAnB,CAA9C;;AAEAhB,6BAAKiB,IAAL,CAAU;AAAA;AAAA,8BAAI,KAAKF,IAAIC,GAAJ,CAAQE,KAAjB;AAAwB;AAAA;AAAA,kCAAG,MAAK,GAAR;AAAaH,oCAAIC,GAAJ,CAAQE;AAArB;AAAxB,yBAAV;AACH,qBAJD;;AAMA,yBAAKC,QAAL,CAAc;AACVnB,8BAAKA;AADK,qBAAd;AAGH;AACJ,aAhBqB,CAgBpBH,IAhBoB,CAgBf,IAhBe,CAAtB;AAiBH;;;;EAhD6BuB,MAAMC,S","file":"GenericObjectLister.js","sourcesContent":["/**\n * Should query for all the schemas and offer a drop down list containing the results.\n */\nclass GenericObjectLister extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.getData = this.getData.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n\n        this.state = {\n            list: []\n        }\n    }\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    render(){\n        return <div className=\"dropdown\">\n            <button className=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                Object\n                <span className=\"caret\"></span>\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                {this.state.list}\n            </ul>\n        </div>\n    }\n\n    getData(){\n        let db = new PouchDB(SCHEMA_DB);\n\n        db.query(SCHEMA_VIEW, function(err, res){\n            if(err)\n                console.error(err);\n            else {\n                console.debug(\"Generic Object Lister got \"+JSON.stringify(res));\n                let list = [];\n                res.rows.map(function (row) {\n                    console.debug(\"Building Object Lister for \" + JSON.stringify(row.key));\n\n                    list.push(<li key={row.key.title}><a href=\"#\">{row.key.title}</a></li>);\n                });\n\n                this.setState({\n                    list:list\n                });\n            }\n        }.bind(this));\n    }\n\n\n}"]}
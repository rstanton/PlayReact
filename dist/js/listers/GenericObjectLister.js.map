{"version":3,"sources":["../../../js/listers/GenericObjectLister.jsx"],"names":["GenericObjectLister","props","getData","bind","componentDidMount","state","list","id","onChange","db","PouchDB","SCHEMA_DB","query","SCHEMA_VIEW","err","res","console","error","push","rows","map","row","key","title","JSON","stringify","setState","React","Component"],"mappings":";;;;;;;;;;AAAA;;;IAGMA,mB;;;AACF,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA,8IACTA,KADS;;AAGf,cAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,OAAf;AACA,cAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,OAAzB;;AAEA,cAAKE,KAAL,GAAa;AACTC,kBAAM;AADG,SAAb;AANe;AASlB;;;;4CAEkB;AACf,iBAAKJ,OAAL;AACH;;;iCAEO;AACJ,mBAAO;AAAA;AAAA,kBAAQ,IAAI,KAAKD,KAAL,CAAWM,EAAvB,EAA2B,UAAU,KAAKN,KAAL,CAAWO,QAAhD,EAA0D,WAAU,cAApE;AACE,qBAAKH,KAAL,CAAWC;AADb,aAAP;AAGH;;;kCAEQ;AACL,gBAAIG,KAAK,IAAIC,OAAJ,CAAYC,SAAZ,CAAT;;AAEAF,eAAGG,KAAH,CAASC,WAAT,EAAsB,UAASC,GAAT,EAAcC,GAAd,EAAkB;AACpC,oBAAGD,GAAH,EACIE,QAAQC,KAAR,CAAcH,GAAd,EADJ,KAEK;;AAED,wBAAIR,OAAO,EAAX;;AAEAA,yBAAKY,IAAL,CAAU;AAAA;AAAA,0BAAQ,KAAK,SAAb,EAAwB,cAAxB;AAAA;AAAA,qBAAV;;AAEAH,wBAAII,IAAJ,CAASC,GAAT,CAAa,UAAUC,GAAV,EAAe;;AAExBf,6BAAKY,IAAL,CAAU;AAAA;AAAA,8BAAQ,KAAKG,IAAIC,GAAJ,CAAQC,KAArB,EAA4B,eAAaC,KAAKC,SAAL,CAAeJ,IAAIC,GAAnB,CAAzC;AAAmED,gCAAIC,GAAJ,CAAQC;AAA3E,yBAAV;AACH,qBAHY,CAGXpB,IAHW,CAGN,IAHM,CAAb;;AAKA,yBAAKuB,QAAL,CAAc;AACVpB,8BAAKA;AADK,qBAAd;AAGH;AACJ,aAlBqB,CAkBpBH,IAlBoB,CAkBf,IAlBe,CAAtB;AAmBH;;;;EA5C6BwB,MAAMC,S","file":"GenericObjectLister.js","sourcesContent":["/**\n * Should query for all the schemas and offer a drop down list containing the results.\n */\nclass GenericObjectLister extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.getData = this.getData.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n\n        this.state = {\n            list: []\n        }\n    }\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    render(){\n        return <select id={this.props.id} onChange={this.props.onChange} className=\"form-control\">\n                {this.state.list}\n            </select>;\n    }\n\n    getData(){\n        let db = new PouchDB(SCHEMA_DB);\n\n        db.query(SCHEMA_VIEW, function(err, res){\n            if(err)\n                console.error(err);\n            else {\n\n                let list = [];\n\n                list.push(<option key={\"default\"} selected>Choose</option>);\n\n                res.rows.map(function (row) {\n\n                    list.push(<option key={row.key.title} data-schema={JSON.stringify(row.key)}>{row.key.title}</option>);\n                }.bind(this));\n\n                this.setState({\n                    list:list\n                });\n            }\n        }.bind(this));\n    }\n}"]}
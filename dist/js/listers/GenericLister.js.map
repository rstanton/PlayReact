{"version":3,"sources":["../../../js/listers/GenericLister.jsx"],"names":["GenericLister","props","componentDidMount","bind","getSchema","getData","showDialog","delete","state","head","body","dialog","setState","db","PouchDB","OBJECT_DB","schema","query","key","title","err","res","console","error","debug","rows","length","map","doc","JSON","stringify","obj","value","td","field","properties","push","id","get","remove","response","next","$","allSchemas","th","button","React","Component"],"mappings":"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","file":"GenericLister.js","sourcesContent":["/**\n * Props will contain the ID of the schema object that describes the resource to be displayed\n * - Get the schema\n * - Open a connection to the relevant database\n * - Query for all objects\n * - Display a table containing the relevant properties\n */\nclass GenericLister extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.getSchema = this.getSchema.bind(this);\n        this.getData = this.getData.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n        this.delete = this.delete.bind(this);\n\n        this.state = {\n            head: [],\n            body: [],\n            dialog: \"\"\n        };\n    }\n\n    componentDidMount(){\n        //Reads the table header and passes the schema doc to 'getData'\n        this.getSchema(this.getData);\n    }\n\n    getData(){\n        this.setState({\n            body:[]\n        });\n\n        //@ToDo, open the object DB, not the Schema DB\n        let db = new PouchDB(OBJECT_DB);\n        let schema = this.props.schema;\n\n        //The view now returns all of the documents (not the IDs)\n        db.query(\"Object/by_name\", {key: schema.title }, function(err,res){\n            if(err){\n                console.error(err);\n            }\n            else{\n                console.debug(\"Got \"+res.rows.length+\" of \"+schema.title);\n                let body = [];\n\n                //Loop each record in the DB\n                let key =0;\n                res.rows.map(function(doc){\n                    console.debug(schema.title+\", Processing Lister for \"+JSON.stringify(doc));\n\n                    let obj = doc.value;\n                    let td = [];\n\n                    for(let field in schema.properties){\n                        td.push(<td key={schema.title+\".\"+field}>{obj[field]}</td>);\n                    }\n\n                    //\n                    body.push(<tr key={key}>\n                        {td}\n                        <td>\n                            <span onClick={() => this.delete(doc.id)} className=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span>\n                        </td></tr>);\n\n                    key++;\n                }.bind(this));\n\n                this.setState({\n                    body:body\n                });\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Remove the object from the DB associated with the Schema\n     *\n     * @param schema\n     * @param id\n     */\n    delete(id){\n        console.debug(\"Delete \"+this.props.schema.title+\" with ID \"+id);\n        let db = new PouchDB(OBJECT_DB);\n\n        db.get(id, function(err, doc){\n            db.remove(doc, function(err, response){\n                if(err)\n                    console.error(err);\n\n                this.getData();\n            }.bind(this));\n        }.bind(this));\n    }\n\n\n    /**\n     * Read the schema from the DB, display the table header and call on to next which should render the data table.\n     *\n     * @param next\n     */\n    getSchema(next){\n        this.setState({\n            head:[],\n            dialog:\"\"\n        });\n\n        let schema = this.props.schema;\n\n        //Setup a new dialog\n        $(\"#dialog\"+schema.title).dialog(\"destroy\"); //JQuery wraps the dialog in tons of gumpf which breaks react. Have to destroy the previous dialog if it exists!\n\n        let dialog = <DynamicDialog allSchemas={this.props.allSchemas} schema={this.props.schema} next={this.getData} id={\"dialog\"+schema.title} title={\"New \"+schema.title} modal={true}/>\n        let props = schema.properties;\n\n        let th=[];\n        for(let field in props){\n            th.push(<th key={field}>{field}</th>);\n        }\n\n        let button = <th key=\"button\"><button onClick={() => this.showDialog(\"dialog\"+schema.title)} className=\"btn btn-primary\">{\"New \"+schema.title}</button></th>;\n        th.push(button);\n\n        this.setState({\n            head:th,\n            dialog:dialog\n        });\n\n        //now populate the data table\n        next();\n    }\n\n    showDialog(id){\n        console.debug(\"Showing dialog with ID \"+id);\n\n        $(\"#\"+id).dialog(\"open\");\n    }\n\n    render(){\n        return <div>\n            {this.state.dialog}\n            <table className=\"table table-striped\">\n                <thead>\n                <tr>{this.state.head}</tr>\n                </thead>\n                <tbody>\n                {this.state.body}\n                </tbody>\n            </table>\n        </div>\n    }\n}"]}
{"version":3,"sources":["../../../js/listers/GenericLister.jsx"],"names":["GenericLister","props","componentDidMount","bind","getSchema","getData","showDialog","delete","state","head","body","dialog","setState","db","PouchDB","OBJECT_DB","schema","query","OBJECT_BY_TYPE","key","id","err","res","console","error","debug","title","rows","length","map","doc","JSON","stringify","obj","value","td","field","properties","push","get","remove","response","next","$","allSchemas","th","hide","displayName","button","React","Component"],"mappings":"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","file":"GenericLister.js","sourcesContent":["/**\n * Props will contain the ID of the schema object that describes the resource to be displayed\n * - Get the schema\n * - Open a connection to the relevant database\n * - Query for all objects\n * - Display a table containing the relevant properties\n */\nclass GenericLister extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.getSchema = this.getSchema.bind(this);\n        this.getData = this.getData.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n        this.delete = this.delete.bind(this);\n\n        this.state = {\n            head: [],\n            body: [],\n            dialog: \"\"\n        };\n    }\n\n    componentDidMount(){\n        //Reads the table header and passes the schema doc to 'getData'\n        this.getSchema(this.getData);\n    }\n\n    getData(){\n        this.setState({\n            body:[]\n        });\n\n        let db = new PouchDB(OBJECT_DB);\n        let schema = this.props.schema;\n\n        //The view now returns all of the documents (not the IDs)\n        db.query(OBJECT_BY_TYPE, {key: schema.id }, function(err,res){\n            if(err){\n                console.error(err);\n            }\n            else{\n                console.debug(schema.title+\" Lister, Got \"+res.rows.length+\" instances\");\n                let body = [];\n\n                //Loop each record in the DB\n                let key =0;\n                res.rows.map(function(doc){\n                    console.debug(schema.title+\" Lister, adding instance: \"+JSON.stringify(doc));\n\n                    let obj = doc.value;\n                    let td = [];\n\n                    for(let field in schema.properties){\n                        td.push(<td key={schema.title+\".\"+field}>{obj[field]}</td>);\n                    }\n\n                    body.push(<tr key={key}>\n                        {td}\n                        <td>\n                            <span onClick={() => this.delete(doc.id)} className=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span>\n                        </td></tr>);\n\n                    key++;\n                }.bind(this));\n\n                this.setState({\n                    body:body\n                });\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Remove the object from the DB associated with the Schema\n     *\n     * @param schema\n     * @param id\n     */\n    delete(id){\n        console.debug(\"Delete \"+this.props.schema.title+\" with ID \"+id);\n        let db = new PouchDB(OBJECT_DB);\n\n        db.get(id, function(err, doc){\n            db.remove(doc, function(err, response){\n                if(err)\n                    console.error(err);\n\n                this.getData();\n            }.bind(this));\n        }.bind(this));\n    }\n\n\n    /**\n     * Read the schema from the DB, display the table header and call on to next which should render the data table.\n     *\n     * @param next\n     */\n    getSchema(next){\n        this.setState({\n            head:[],\n            dialog:\"\"\n        });\n\n        let schema = this.props.schema;\n\n        //Setup a new dialog\n        $(\"#dialog\"+schema.title).dialog(\"destroy\"); //JQuery wraps the dialog in tons of gumpf which breaks react. Have to destroy the previous dialog if it exists!\n\n        let dialog = <DynamicDialog allSchemas={this.props.allSchemas} schema={this.props.schema} next={this.getData} id={\"dialog\"+schema.title} title={\"New \"+schema.title} modal={true}/>\n        let props = schema.properties;\n\n        let th=[];\n        for(let field in props) {\n            const hide = props[field].hide;\n\n            let displayName = field;\n\n            if (props[field].displayName)\n                displayName = props[field].displayName;\n\n            if (!hide)\n                th.push(<th key={field}>{displayName}</th>);\n        }\n\n        let button = <th key=\"button\"><button onClick={() => this.showDialog(\"dialog\"+schema.title)} className=\"btn btn-primary\">{\"New \"+schema.title}</button></th>;\n        th.push(button);\n\n        this.setState({\n            head:th,\n            dialog:dialog\n        });\n\n        //now populate the data table\n        next();\n    }\n\n    showDialog(id){\n        console.debug(\"Showing dialog with ID \"+id);\n\n        $(\"#\"+id).dialog(\"open\");\n    }\n\n    render(){\n        return <div>\n            {this.state.dialog}\n            <table className=\"table table-striped\">\n                <thead>\n                <tr>{this.state.head}</tr>\n                </thead>\n                <tbody>\n                {this.state.body}\n                </tbody>\n            </table>\n        </div>\n    }\n}"]}
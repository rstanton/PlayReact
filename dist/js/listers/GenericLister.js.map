{"version":3,"sources":["../../../js/listers/GenericLister.jsx"],"names":["GenericLister","props","componentDidMount","bind","getSchema","getData","showDialog","delete","state","head","body","dialog","schema","setState","console","debug","JSON","stringify","db","PouchDB","title","query","err","res","error","key","rows","map","doc","obj","td","field","properties","push","eval","id","get","remove","response","next","SCHEMA_DB","$","th","button","React","Component"],"mappings":"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","file":"GenericLister.js","sourcesContent":["/**\n * Props will contain the ID of the schema object that describes the resource to be displayed\n * - Get the schema\n * - Open a connection to the relevant database\n * - Query for all objects\n * - Display a table containing the relevant properties\n */\nclass GenericLister extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.getSchema = this.getSchema.bind(this);\n        this.getData = this.getData.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n        this.delete = this.delete.bind(this);\n\n        this.state = {\n            head: [],\n            body: [],\n            dialog: \"\"\n        };\n    }\n\n    componentDidMount(){\n        //Reads the table header and passes the schema doc to 'getData'\n        this.getSchema(this.getData);\n    }\n\n    //@ToDo finish building table data rows\n    getData(schema){\n        this.setState({\n            body:[]\n        });\n\n        console.debug(JSON.stringify(schema));\n\n        let db = new PouchDB(schema.title);\n\n\n        //The view now returns all of the documents (not the IDs)\n        db.query(schema.title+\"/by_name\", function(err,res){\n            if(err){\n                console.error(err);\n            }\n            else{\n                let body = [];\n\n                //Loop each record in the DB\n                let key =0;\n                res.rows.map(function(doc){\n                    console.debug(schema.title+\", Processing Lister for \"+JSON.stringify(doc.key));\n\n                    let obj = doc.key;\n                    let td = [];\n\n                    //@Todo, need to use the schema here -> we need to get the attributes of the document based on the fields in the schema, can't just iterate over the object as there maybe missing / null fields.\n                    for(let field in schema.properties){\n                        console.debug(\"Processing \"+ JSON.stringify(field));\n\n                        td.push(<td key={schema.title+\".\"+field}>{eval(\"obj.\"+field)}</td>);\n                    }\n\n                    //\n                    body.push(<tr key={key}>\n                        {td}\n                        <td>\n                            <span onClick={() => this.delete(schema, doc.id)} className=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span>\n                        </td></tr>);\n\n                    key++;\n                }.bind(this));\n\n                this.setState({\n                    body:body\n                });\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Remove the object from the DB associated with the Schema\n     *\n     * @param schema\n     * @param id\n     */\n    delete(schema, id){\n        console.debug(\"Delete \"+schema.title+\" with ID \"+id);\n        let db = new PouchDB(schema.title);\n\n        db.get(id, function(err, doc){\n            db.remove(doc, function(err, response){\n                if(err)\n                    console.error(err);\n\n                this.getData(schema);\n            }.bind(this));\n        }.bind(this));\n    }\n\n\n    /**\n     * Read the schema from the DB, display the table header and call on to next which should render the data table.\n     *\n     * @param next\n     */\n    getSchema(next){\n        this.setState({\n            head:[],\n            dialog:\"\"\n        });\n\n        let db = new PouchDB(SCHEMA_DB);\n\n        db.get(this.props.id, function(err, doc){\n            if(err){\n                console.error(err);\n            }\n            else{\n                console.debug(\"Building Table Header for \"+JSON.stringify(doc));\n\n                //Setup a new dialog\n                $(\"#dialog\"+doc.title).dialog(\"destroy\"); //JQuery wraps the dialog in tons of gumpf which breaks react. Have to destroy the previous dialog if it exists!\n\n                //let dialog = <GenericDialog key={\"dialog\"+doc.title} next={this.getData} id={\"dialog\"+doc.title} title={\"New \"+ doc.title} modal={true} schema={doc}/>;\n                let dialog = <DynamicDialog next={this.getData} id={\"dialog\"+doc.title} title={\"New Object\"} modal={true}/>\n                let props = doc.properties;\n\n                let th=[];\n                for(let field in props){\n                    th.push(<th key={field}>{field}</th>);\n                }\n\n                let button = <th key=\"button\"><button onClick={() => this.showDialog(\"dialog\"+doc.title)} className=\"btn btn-primary\">{\"New \"+doc.title}</button></th>;\n                th.push(button);\n\n                this.setState({\n                    head:th,\n                    dialog:dialog\n                });\n            }\n            //now populate the data table\n            next(doc);\n        }.bind(this));\n    }\n\n    showDialog(id){\n        console.debug(\"Showing dialog with ID \"+id);\n\n        $(\"#\"+id).dialog(\"open\");\n    }\n\n    render(){\n        return <div>\n            {this.state.dialog}\n            <table className=\"table table-striped\">\n                <thead>\n                <tr>{this.state.head}</tr>\n                </thead>\n                <tbody>\n                {this.state.body}\n                </tbody>\n            </table>\n        </div>\n    }\n}"]}
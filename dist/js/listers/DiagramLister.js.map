{"version":3,"sources":["../../../js/listers/DiagramLister.jsx"],"names":["DiagramLister","props","state","list","getDiagrams","bind","showDialog","$","dialog","setState","diagramDB","query","DIAGRAM_VIEW","err","res","console","error","rows","map","key","id","n","length","get","doc","arr","push","_id","diagramName","author","delete","log","remove","response","React","Component"],"mappings":"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","file":"DiagramLister.js","sourcesContent":["//this class will iterate through all the diagrams in the database...\nclass DiagramLister extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            list:[]\n        };\n\n        this.getDiagrams = this.getDiagrams.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n    }\n\n    componentDidMount(){\n        this.getDiagrams();\n    }\n\n    render() {\n        return <div>\n            <table className=\"table table-striped\">\n                <thead>\n                <tr><th>#</th><th>Name</th><th>Author</th><th>\n                    <span onClick={() => this.getDiagrams()} className=\"glyphicon glyphicon-refresh\" aria-hidden=\"true\"></span>\n                    <span onClick={() => this.showDialog()} className=\"glyphicon glyphicon-plus-sign\" aria-hidden=\"true\"></span>\n                </th></tr>\n                </thead>\n                <tbody>\n                    {this.state.list}\n                </tbody>\n            </table>\n        </div>\n    }\n\n    showDialog(){\n        $(\"#diagramdialog\").dialog(\"open\");\n    }\n\n    getDiagrams(){\n        $(\"#diagramdialog\").dialog(\"close\");\n        //Clear the current state\n        this.setState({\n            list:[]\n        });\n\n        //Get all documents in the database index\n        diagramDB.query(DIAGRAM_VIEW, function(err, res){\n            $(\"#AppModal\").dialog(\"close\");\n\n            if(err)\n                console.error(err);\n\n            //get a list of all the ids\n            var list = [];\n            list = res.rows.map(function(key){\n                return key.id;\n            });\n\n            for(let n=0;n<list.length; n++) {\n                diagramDB.get(list[n], function (err, doc) {\n                    if (err)\n                        console.error(err);\n\n                    //get the current array and add a new entry on the end\n                    let arr = this.state.list;\n                    arr.push(<tr key={doc._id}><td>{doc._id}</td><td>{doc.diagramName}</td><td>{doc.author}</td><td>\n                        <a href=\"#\" title=\"Delete Diagram\"><span onClick={() => this.delete(doc._id)} className=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span></a>\n                        <a href={\"canvas.html?\"+doc._id} target=\"_blank\" title=\"Edit Diagram\"><span className=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span></a>\n                    </td></tr>);\n\n                    //save to the state\n                    this.setState({list: arr});\n\n                }.bind(this));\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Removes the application from the database that is associated with the specified application ID then refreshes the view state based on the updated DB contents\n     * @param id\n     */\n    delete(id){\n        console.log(\"Delete Request for \"+id);\n\n        diagramDB.get(id, function(err, doc){\n            diagramDB.remove(doc, function(err, response){\n                if(err)\n                    console.error(err);\n\n                this.getDiagrams();\n\n            }.bind(this));\n        }.bind(this));\n    }\n\n}"]}
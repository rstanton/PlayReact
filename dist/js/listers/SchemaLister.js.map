{"version":3,"sources":["../../../js/listers/SchemaLister.jsx"],"names":["SchemaLister","props","getSchemas","bind","componentDidMount","delete","state","schemas","db","PouchDB","SCHEMA_DB","setState","query","err","res","console","error","list","rows","map","obj","id","x","get","doc","arr","push","_id","title","JSON","stringify","undefined","debug","remove","resposne","next","view","React","Component"],"mappings":"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","file":"SchemaLister.js","sourcesContent":["class SchemaLister extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.getSchemas = this.getSchemas.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.delete = this.delete.bind(this);\n\n        this.state = {\n            schemas:[]\n        }\n    }\n\n    componentDidMount(){\n        this.getSchemas();\n    }\n    \n    getSchemas(){\n        let db = new PouchDB(SCHEMA_DB);\n        this.setState({\n            schemas:[]\n        });\n\n        db.query(\"Schema/all\", function(err, res) {\n            if(err)\n                console.error(err);\n            else {\n                let list = [];\n\n                list = res.rows.map(function (obj) {\n                    return obj.id;\n                });\n\n                for(var x of list){\n                    db.get(x, function(err, doc){\n                        if(err)\n                            console.error(err);\n                        else{\n                            let arr = this.state.schemas;\n                            //@Todo all delete option\n                            arr.push(<tr key={doc._id}>\n                                <td>{doc._id}</td>\n                                <td>{doc.title}</td>\n                                <td>\n                                    <textarea readOnly rows=\"10\" cols=\"80\" defaultValue={JSON.stringify(doc, undefined, 2)}></textarea>\n                                </td>\n                                <td>\n                                    <span onClick={() => this.delete(doc._id)} className=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span>\n                                </td></tr>);\n\n                            this.setState({\n                                schemas: arr\n                            });\n                        }\n                    }.bind(this));\n                }\n            }\n        }.bind(this));\n    }\n\n    //@Todo - the delete function should be generic cross all objects, no need to keep re-writing\n    delete(id){\n        console.debug(\"Deleting Schema with ID \"+id);\n\n        let db = new PouchDB(SCHEMA_DB);\n\n        db.get(id, function(err, doc){\n            db.remove(doc, function(err, resposne){\n                if(!err)\n                    this.props.next();\n\n            }.bind(this));\n        }.bind(this));\n\n    }\n\n    render(){\n        let view = <div>\n            <table className=\"table table-striped\">\n                <thead>\n                <tr><th>#</th><th>Name</th><th>Schema</th><th>\n                    <span onClick={() => this.getSchemas()} className=\"glyphicon glyphicon-refresh\" aria-hidden=\"true\"></span>\n                </th></tr>\n                </thead>\n                <tbody>\n                {this.state.schemas}\n                </tbody>\n            </table>\n        </div>;\n\n        return view;\n    }\n}"]}
{"version":3,"sources":["../../js/App.jsx"],"names":["diagramDB","App","props","PouchDB","DIAGRAM_DB","init","bind","createSchemaView","state","view","db","SCHEMA_DB","info","err","doc_count","update_seq","title","baseSchemas","map","schema","console","log","post","doc","setState","designDoc","_id","views","by_name","emit","toString","put","resp","status","error","React","Component","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;AAAA,IAAIA,SAAJ;;AAEA;;;;;;;IAMMC,G;;;AACF,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA,8GACRA,KADQ;;AAGdF,oBAAY,IAAIG,OAAJ,CAAYC,UAAZ,CAAZ;;AAEA,cAAKC,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,OAAZ;AACA,cAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;;AAEA,cAAKD,IAAL;;AAEA,cAAKG,KAAL,GAAa;AACTC,kBAAM;AADG,SAAb;;AAVc;AAcjB;;AAGD;;;;;;;+BAGM;AACF,gBAAIC,KAAK,IAAIP,OAAJ,CAAYQ,SAAZ,CAAT;;AAEAD,eAAGE,IAAH,CAAQ,UAASC,GAAT,EAAcD,IAAd,EAAmB;AACvB,oBAAGA,KAAKE,SAAL,IAAgB,CAAhB,IAAqBF,KAAKG,UAAL,IAAiB,CAAzC,EAA2C;;AAEvC;AACA,yBAAKR,gBAAL,CAAsB,EAACS,OAAM,QAAP,EAAtB;;AAEA;AACAC,gCAAYC,GAAZ,CAAgB,UAASC,MAAT,EAAgB;AAC5BC,gCAAQC,GAAR,CAAY,8BAA4BF,OAAOH,KAA/C;;AAEA;AACAN,2BAAGY,IAAH,CAAQH,MAAR,EAAgB,UAASN,GAAT,EAAcU,GAAd,EAAkB;AAC9B;AACA,iCAAKhB,gBAAL,CAAsBY,MAAtB;AACH,yBAHe,CAGdb,IAHc,CAGT,IAHS,CAAhB;AAIH,qBARe,CAQdA,IARc,CAQT,IARS,CAAhB;AAUH,iBAhBD,MAiBI;AAAE;AACF,yBAAKkB,QAAL,CAAc;AACVf,8BAAK,oBAAC,eAAD;AADK,qBAAd;AAGH;AACJ,aAvBO,CAuBNH,IAvBM,CAuBD,IAvBC,CAAR;AAwBH;;AAED;;;;;;;yCAIiBa,M,EAAO;AACpB,gBAAIT,KAAK,IAAIP,OAAJ,CAAYgB,OAAOH,KAAnB,CAAT;;AAEA,gBAAIS,YAAY;AACZC,qBAAI,aAAWP,OAAOH,KADV;AAEZW,uBAAM;AACFC,6BAAQ;AACJV,6BAAI,UAASK,GAAT,EAAc;AACdM,iCAAKN,GAAL;AACH,yBAFG,CAEFO,QAFE;AADA;AADN;AAFM,aAAhB;;AAWApB,eAAGqB,GAAH,CAAON,SAAP,EAAkB,UAASZ,GAAT,EAAcmB,IAAd,EAAmB;AACjC,oBAAGnB,GAAH,EAAQ;AACJ,wBAAIA,IAAIoB,MAAJ,IAAc,GAAlB,EACIb,QAAQc,KAAR,CAAcrB,GAAd;AACP,iBAHD,MAIK;AACDO,4BAAQC,GAAR,CAAY,eAAeF,OAAOH,KAAtB,GAA8B,WAA1C;;AAEA,yBAAKQ,QAAL,CAAc;AACVf,8BAAM,oBAAC,eAAD;AADI,qBAAd;AAGH;AACJ,aAZiB,CAYhBH,IAZgB,CAYX,IAZW,CAAlB;AAaH;;AAGD;;;;;;;iCAIQ;AACJ,mBAAO;AAAA;AAAA;AACH;AAAA;AAAA,sBAAK,WAAU,WAAf;AACK,yBAAKE,KAAL,CAAWC;AADhB;AADG,aAAP;AAKH;;;;EA9Fa0B,MAAMC,S;;AAiGxBC,SAASC,MAAT,CACI,oBAAC,GAAD,OADJ,EAEIC,SAASC,cAAT,CAAwB,MAAxB,CAFJ","file":"App.js","sourcesContent":["var diagramDB;\r\n\r\n/**\r\n * This is the entry point to the 'admin' application\r\n *\r\n * @ToDo - Rethink the relationship model, It doesn't have the same logic as plain objects, so needs it's own management.\r\n * @ToDo - diagrams, do they start as objects?\r\n */\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        diagramDB = new PouchDB(DIAGRAM_DB);\r\n\r\n        this.init = this.init.bind(this);\r\n        this.createSchemaView = this.createSchemaView.bind(this);\r\n\r\n        this.init();\r\n\r\n        this.state = {\r\n            view: \"\"\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * This needs to read all the schemas and create the relevant views\r\n     */\r\n    init(){\r\n        let db = new PouchDB(SCHEMA_DB);\r\n\r\n        db.info(function(err, info){\r\n            if(info.doc_count==0 && info.update_seq==0){\r\n\r\n                //Hacky, but create the view for the Schema DB\r\n                this.createSchemaView({title:\"Schema\"});\r\n\r\n                //For each of the out of the box schemas\r\n                baseSchemas.map(function(schema){\r\n                    console.log(\"Creating DB and View for \"+schema.title);\r\n\r\n                    //Create the schema record\r\n                    db.post(schema, function(err, doc){\r\n                        //create the map/reduce view\r\n                        this.createSchemaView(schema);\r\n                    }.bind(this));\r\n                }.bind(this));\r\n\r\n            }\r\n            else{ //Database already exists, nothing to do, just show the tabs\r\n                this.setState({\r\n                    view:<DynamicTabSheet/>\r\n                });\r\n            }\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Creates the actual views\r\n     * @param doc The schema 'by_name' results doc, contains 'key' (title of the schema eg 'Application') and 'id'\r\n     */\r\n    createSchemaView(schema){\r\n        let db = new PouchDB(schema.title);\r\n\r\n        var designDoc = {\r\n            _id:'_design/'+schema.title,\r\n            views:{\r\n                by_name:{\r\n                    map:function(doc) {\r\n                        emit(doc);\r\n                    }.toString()\r\n                }\r\n            }\r\n        };\r\n\r\n        db.put(designDoc, function(err, resp){\r\n            if(err) {\r\n                if (err.status != 409)\r\n                    console.error(err);\r\n            }\r\n            else {\r\n                console.log(\"Index for \" + schema.title + \" created.\");\r\n                \r\n                this.setState({\r\n                    view: <DynamicTabSheet/>\r\n                });\r\n            }\r\n        }.bind(this));\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds the navigation, adds a hidden modal for new applications, shows the tabbed screen\r\n     * @returns {XML}\r\n     */\r\n    render(){\r\n        return <div>\r\n            <div className=\"container\">\r\n                {this.state.view}\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n"]}
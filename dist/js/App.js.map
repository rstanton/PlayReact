{"version":3,"sources":["../../js/App.jsx"],"names":["App","props","init","bind","createSchemaView","state","view","db","PouchDB","OBJECT_DB","info","err","doc_count","update_seq","console","debug","title","setState","schema","designDoc","_id","views","by_type","map","doc","type","emit","toString","by_name_and_type","name","all","put","resp","status","error","log","React","Component","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;AAAA;;;;IAIMA,G;;;AACF,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA,8GACRA,KADQ;;AAGd,cAAKC,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,OAAZ;AACA,cAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;;AAEA,cAAKD,IAAL;;AAEA,cAAKG,KAAL,GAAa;AACTC,kBAAM;AADG,SAAb;AARc;AAWjB;;AAGD;;;;;;;+BAGO;AACH,gBAAIC,KAAK,IAAIC,OAAJ,CAAYC,SAAZ,CAAT;;AAEAF,eAAGG,IAAH,CAAQ,UAAUC,GAAV,EAAeD,IAAf,EAAqB;AACzB,oBAAIA,KAAKE,SAAL,IAAkB,CAAlB,IAAuBF,KAAKG,UAAL,IAAmB,CAA9C,EAAiD;AAC7CC,4BAAQC,KAAR,CAAc,2BAAd;;AAEA;AACA,yBAAKX,gBAAL,CAAsB,EAACY,OAAO,QAAR,EAAtB;AACA,yBAAKZ,gBAAL,CAAsB,EAACY,OAAO,QAAR,EAAtB;AACA,yBAAKZ,gBAAL,CAAsB,EAACY,OAAO,QAAR,EAAtB;AACH;;AAED;AACA,qBAAKC,QAAL,CAAc;AACVX,0BAAM,oBAAC,eAAD;AADI,iBAAd;AAGH,aAdO,CAcNH,IAdM,CAcD,IAdC,CAAR;AAeH;;AAED;;;;;;;yCAIiBe,M,EAAO;AACpB,gBAAIX,KAAK,IAAIC,OAAJ,CAAYU,OAAOF,KAAnB,CAAT;;AAEA,gBAAIG,YAAY;AACZC,qBAAI,aAAWF,OAAOF,KADV;AAEZK,uBAAM;AACFC,6BAAQ;AACJC,6BAAI,UAASC,GAAT,EAAc;AACd,gCAAGA,IAAIC,IAAP,EAAa;AACTC,qCAAKF,IAAIC,IAAT,EAAeD,GAAf;AACH;AACJ,yBAJG,CAIFG,QAJE;AADA,qBADN;AAQFC,sCAAiB;AACbL,6BAAI,UAASC,GAAT,EAAa;AACb,gCAAGA,IAAIC,IAAP,EACIC,KAAKF,IAAIR,KAAT,EAAgBQ,GAAhB;;AAEJ,gCAAGA,IAAIK,IAAP,EACIH,KAAKF,IAAIK,IAAT,EAAeL,GAAf;AACP,yBANG,CAMFG,QANE;AADS,qBARf;AAiBFG,yBAAI;AACAP,6BAAI,UAASC,GAAT,EAAc;AACdE,iCAAKF,GAAL;AACH,yBAFG,CAEFG,QAFE;AADJ;AAjBF;AAFM,aAAhB;;AA2BApB,eAAGwB,GAAH,CAAOZ,SAAP,EAAkB,UAASR,GAAT,EAAcqB,IAAd,EAAmB;AACjC,oBAAGrB,GAAH,EAAQ;AACJ,wBAAIA,IAAIsB,MAAJ,IAAc,GAAlB,EACInB,QAAQoB,KAAR,CAAcvB,GAAd;AACP,iBAHD,MAIK;AACDG,4BAAQqB,GAAR,CAAY,eAAejB,OAAOF,KAAtB,GAA8B,WAA1C;AACH;AACJ,aARiB,CAQhBb,IARgB,CAQX,IARW,CAAlB;AASH;;AAGD;;;;;;;iCAIQ;AACJ,mBAAO;AAAA;AAAA;AACH;AAAA;AAAA,sBAAK,WAAU,WAAf;AACK,yBAAKE,KAAL,CAAWC;AADhB;AADG,aAAP;AAKH;;;;EA9Fa8B,MAAMC,S;;AAiGxBC,SAASC,MAAT,CACI,oBAAC,GAAD,OADJ,EAEIC,SAASC,cAAT,CAAwB,MAAxB,CAFJ","file":"App.js","sourcesContent":["/**\r\n * This is the entry point to the 'admin' application\r\n *\r\n */\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.init = this.init.bind(this);\r\n        this.createSchemaView = this.createSchemaView.bind(this);\r\n\r\n        this.init();\r\n\r\n        this.state = {\r\n            view: \"\"\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * This needs to read all the schemas and create the relevant views\r\n     */\r\n    init() {\r\n        let db = new PouchDB(OBJECT_DB);\r\n\r\n        db.info(function (err, info) {\r\n            if (info.doc_count == 0 && info.update_seq == 0) {\r\n                console.debug(\"First Boot. Setting up...\");\r\n\r\n                //Hacky, but create the view for the Schema DB\r\n                this.createSchemaView({title: \"Schema\"});\r\n                this.createSchemaView({title: \"Config\"});\r\n                this.createSchemaView({title: \"Object\"});\r\n            }\r\n\r\n            //Database already exists, nothing to do, just show the tabs\r\n            this.setState({\r\n                view: <DynamicTabSheet/>\r\n            });\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Creates the actual views\r\n     * @param doc The schema 'by_name' results doc, contains 'key' (title of the schema eg 'Application') and 'id'\r\n     */\r\n    createSchemaView(schema){\r\n        let db = new PouchDB(schema.title);\r\n\r\n        var designDoc = {\r\n            _id:'_design/'+schema.title,\r\n            views:{\r\n                by_type:{\r\n                    map:function(doc) {\r\n                        if(doc.type) {\r\n                            emit(doc.type, doc);\r\n                        }\r\n                    }.toString()\r\n                },\r\n                by_name_and_type:{\r\n                    map:function(doc){\r\n                        if(doc.type)\r\n                            emit(doc.title, doc);\r\n\r\n                        if(doc.name)\r\n                            emit(doc.name, doc);\r\n                    }.toString()\r\n                },\r\n                all:{\r\n                    map:function(doc) {\r\n                        emit(doc);\r\n                    }.toString()\r\n                }\r\n            }\r\n        };\r\n\r\n        db.put(designDoc, function(err, resp){\r\n            if(err) {\r\n                if (err.status != 409)\r\n                    console.error(err);\r\n            }\r\n            else {\r\n                console.log(\"Index for \" + schema.title + \" created.\");\r\n            }\r\n        }.bind(this));\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds the navigation, adds a hidden modal for new applications, shows the tabbed screen\r\n     * @returns {XML}\r\n     */\r\n    render(){\r\n        return <div>\r\n            <div className=\"container\">\r\n                {this.state.view}\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n"]}
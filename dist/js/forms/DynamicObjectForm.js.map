{"version":3,"sources":["../../../js/forms/DynamicObjectForm.jsx"],"names":["DynamicObjectForm","props","buildInputForm","bind","handleSelect","handleSubmit","handleChange","initiateState","state","list","fields","form","schema","properties","field","setState","console","log","JSON","stringify","inputFields","debug","obj","hide","displayName","type","localeCompare","push","$ref","allSchemas","event","db","PouchDB","OBJECT_DB","id","post","err","res","error","$","dialogId","dialog","next","target","data","value","options","selectedOptions","x","title","attributes","React","Component"],"mappings":";;;;;;;;;;;;AAAA;;;IAGMA,iB;;;AACF,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA,0IACNA,KADM;;AAGf,cAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,OAAtB;AACA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,cAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,OAApB;AACA,cAAKG,YAAL,GAAoB,MAAKA,YAAL,CAAkBH,IAAlB,OAApB;AACA,cAAKI,aAAL,GAAqB,MAAKA,aAAL,CAAmBJ,IAAnB,OAArB;;AAEA,cAAKK,KAAL,GAAa,EAAb;AACA,cAAKC,IAAL,GAAY,EAAZ;;AAVe;AAYlB;;;;4CAEkB;AACf,iBAAKF,aAAL;AACH;;;iCAEQ;AACL,gBAAIG,SAAS,KAAKR,cAAL,EAAb;AACA,gBAAIS,OAAO;AAAA;AAAA,kBAAM,QAAO,GAAb,EAAiB,UAAU,KAAKN,YAAhC;AACP;AAAA;AAAA,sBAAK,WAAU,YAAf;AACKK;AADL,iBADO;AAIP;AAAA;AAAA,sBAAQ,MAAK,QAAb,EAAsB,WAAU,iBAAhC;AAAA;AAAA;AAJO,aAAX;;AAOA,mBAAOC,IAAP;AACH;;;wCAEc;AACX,gBAAIV,QAAQ,KAAKA,KAAL,CAAWW,MAAX,CAAkBC,UAA9B;;AAEA,iBAAI,IAAIC,KAAR,IAAiBb,KAAjB,EAAuB;AACnB,qBAAKc,QAAL,qBACKD,KADL,EACY,EADZ;AAGH;AACJ;;;yCAEe;AACZE,oBAAQC,GAAR,CAAY,6BAA2BC,KAAKC,SAAL,CAAe,KAAKlB,KAAL,CAAWW,MAA1B,CAAvC;;AAEA,gBAAIQ,cAAc,EAAlB;AACA,gBAAInB,QAAQ,KAAKA,KAAL,CAAWW,MAAX,CAAkBC,UAA9B;;AAEA;;AAEA,iBAAI,IAAIC,KAAR,IAAiBb,KAAjB,EAAuB;AACnBe,wBAAQK,KAAR,CAAc,+BAA6BP,KAA7B,GAAoC,aAApC,GAAkDI,KAAKC,SAAL,CAAelB,MAAMa,KAAN,CAAf,CAAhE;;AAEA,oBAAIQ,MAAMrB,MAAMa,KAAN,CAAV;;AAEA,oBAAGQ,IAAIC,IAAP,EACI;;AAEJ,oBAAIC,cAAcV,KAAlB;AACA,oBAAGQ,IAAIE,WAAP,EAAmB;AACfA,kCAAcF,IAAIE,WAAlB;AACH;;AAED,oBAAGF,IAAIG,IAAJ,CAASC,aAAT,CAAuB,QAAvB,KAAkC,CAArC,EAAwC;AACpCN,gCAAYO,IAAZ,CAAiB;AAAA;AAAA,0BAAK,KAAKb,KAAV;AACb;AAAA;AAAA,8BAAO,SAAS,UAAUA,KAA1B;AAAkCU;AAAlC,yBADa;AAEb,uDAAO,MAAK,MAAZ,EAAmB,OAAO,KAAKhB,KAAL,CAAWM,KAAX,CAA1B,EAA6C,UAAU,KAAKR,YAA5D,EAA0E,WAAU,cAApF,EAAmG,aAAa,WAAWQ,KAA3H,EAAkI,IAAIA,KAAtI,EAA6I,cAAYA,KAAzJ;AAFa,qBAAjB;AAIH,iBALD,MAMK,IAAGQ,IAAIG,IAAJ,CAASC,aAAT,CAAuB,QAAvB,KAAkC,CAArC,EAAuC;AACxC;AACAN,gCAAYO,IAAZ,CAAiB;AAAA;AAAA,0BAAK,KAAKb,KAAV;AAAiB;AAAA;AAAA,8BAAO,SAAS,UAAQA,KAAxB;AAAgCU;AAAhC,yBAAjB;AACb,4CAAC,MAAD,IAAQ,OAAO,KAAKhB,KAAL,CAAWM,KAAX,CAAf,EAAkC,OAAO,KAAzC,EAAgD,cAAc,KAAKV,YAAnE,EAAiF,OAAOU,KAAxF,EAA+F,QAAQQ,IAAIM,IAA3G,EAAiH,MAAM,KAAK3B,KAAL,CAAW4B,UAAlI;AADa,qBAAjB;AAGH,iBALI,MAMA,IAAGP,IAAIG,IAAJ,CAASC,aAAT,CAAuB,OAAvB,KAAiC,CAApC,EAAuC;AACxCN,gCAAYO,IAAZ,CAAiB;AAAA;AAAA,0BAAK,KAAKb,KAAV;AAAiB;AAAA;AAAA,8BAAO,SAAS,UAAQA,KAAxB;AAAgCU;AAAhC,yBAAjB;AACb;AAAA;AAAA,8BAAK,WAAU,aAAf;AACI;AAAA;AAAA,kCAAK,WAAU,YAAf;AACI,oDAAC,MAAD,IAAQ,OAAO,KAAKhB,KAAL,CAAWM,KAAX,CAAf,EAAkC,OAAO,IAAzC,EAA+C,cAAc,KAAKV,YAAlE,EAAgF,OAAOU,KAAvF,EAA8F,QAAQQ,IAAIM,IAA1G,EAAgH,MAAM,KAAK3B,KAAL,CAAW4B,UAAjI;AADJ;AADJ;AADa,qBAAjB;AAOH;AACJ;;AAED,mBAAOT,WAAP;AACH;;AAED;;;;qCACaU,K,EAAM;AACf,gBAAIC,KAAK,IAAIC,OAAJ,CAAYC,SAAZ,CAAT;;AAEA,iBAAKzB,KAAL,CAAWiB,IAAX,GAAkB,KAAKxB,KAAL,CAAWW,MAAX,CAAkBsB,EAApC;;AAEAlB,oBAAQC,GAAR,CAAY,yBAAuBC,KAAKC,SAAL,CAAe,KAAKX,KAApB,CAAnC;;AAEAuB,eAAGI,IAAH,CAAQ,KAAK3B,KAAb,EAAoB,UAAS4B,GAAT,EAAcC,GAAd,EAAkB;AAClC,oBAAGD,GAAH,EACIpB,QAAQsB,KAAR,CAAcF,GAAd,EADJ,KAEI;AACAG,sBAAE,MAAI,KAAKtC,KAAL,CAAWuC,QAAjB,EAA2BC,MAA3B,CAAkC,OAAlC;;AAEA,yBAAKlC,aAAL;;AAEA;AACA,yBAAKN,KAAL,CAAWyC,IAAX;AACH;AACJ,aAXmB,CAWlBvC,IAXkB,CAWb,IAXa,CAApB;AAYH;;;qCAEY2B,K,EAAM;AACf,gBAAMhB,QAAQ,CAACyB,EAAE,MAAIT,MAAMa,MAAN,CAAaT,EAAnB,EAAuBU,IAAvB,CAA4B,OAA5B,CAAD,CAAd;;AAEA5B,oBAAQK,KAAR,CAAc,qBAAmBP,KAAnB,GAAyB,kBAAvC;;AAEA;AACA;;AAEA,iBAAKC,QAAL,qBACKD,KADL,EACYgB,MAAMa,MAAN,CAAaE,KADzB;;AAIA7B,oBAAQC,GAAR,CAAY,gBAAcC,KAAKC,SAAL,CAAe,KAAKX,KAApB,CAA1B;AACH;;;qCAEYsB,K,EAAM;AACf,gBAAMhB,QAAQ,CAACyB,EAAE,MAAIT,MAAMa,MAAN,CAAaT,EAAnB,EAAuBU,IAAvB,CAA4B,OAA5B,CAAD,CAAd;AACA5B,oBAAQK,KAAR,CAAc,qBAAmBP,KAAnB,GAAyB,kBAAvC;;AAEA,gBAAMgC,UAAUhB,MAAMa,MAAN,CAAaI,eAA7B;;AAEA,gBAAItC,OAAO,EAAX;AANe;AAAA;AAAA;;AAAA;AAOf,qCAAaqC,OAAb,8HAAqB;AAAA,wBAAbE,CAAa;;AACjB,wBAAMC,QAAQD,EAAEE,UAAF,CAAa,YAAb,EAA2BL,KAAzC;AACA,wBAAMpB,OAAOuB,EAAEE,UAAF,CAAa,WAAb,EAA0BL,KAAvC;;AAEApC,yBAAKkB,IAAL,CAAUF,IAAV;;AAEA,wBAAIH,MAAI,EAAR;AACAA,wBAAI2B,KAAJ,GAAYA,KAAZ;AACA3B,wBAAIG,IAAJ,GAAWA,IAAX;;AAEA,yBAAKhB,IAAL,CAAUkB,IAAV,CAAeL,GAAf;AAEH;;AAED;AACA;AACA;AAvBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBf,iBAAKP,QAAL,qBACKD,KADL,EACaL,IADb;;AAIAO,oBAAQC,GAAR,CAAY,gBAAcC,KAAKC,SAAL,CAAe,KAAKX,KAApB,CAA1B;AACAQ,oBAAQC,GAAR,CAAY,eAAaC,KAAKC,SAAL,CAAe,KAAKV,IAApB,CAAzB;AACH;;;;EA5J2B0C,MAAMC,S","file":"DynamicObjectForm.js","sourcesContent":["/**\n * Builds an input for for a given schema (this.props.schema)\n */\nclass DynamicObjectForm extends React.Component{\n    constructor(props) {\n           super(props);\n\n        this.buildInputForm = this.buildInputForm.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.initiateState = this.initiateState.bind(this);\n\n        this.state = {};\n        this.list = [];\n\n    }\n\n    componentDidMount(){\n        this.initiateState();\n    }\n\n    render() {\n        let fields = this.buildInputForm();\n        let form = <form action=\"#\" onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n                {fields}\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n        </form>;\n\n        return form;\n    }\n\n    initiateState(){\n        let props = this.props.schema.properties;\n\n        for(let field in props){\n            this.setState({\n                [field]:[]\n            });\n        }\n    }\n\n    buildInputForm(){\n        console.log(\"Building Input Form for \"+JSON.stringify(this.props.schema));\n\n        let inputFields = [];\n        let props = this.props.schema.properties;\n\n        //@Todo this needs to support all JSON Schema type fields\n\n        for(let field in props){\n            console.debug(\"Building Form element for \"+field +\" for type: \"+JSON.stringify(props[field]));\n\n            let obj = props[field];\n\n            if(obj.hide)\n                continue;\n\n            let displayName = field;\n            if(obj.displayName){\n                displayName = obj.displayName;\n            }\n\n            if(obj.type.localeCompare(\"string\")==0) {\n                inputFields.push(<div key={field}>\n                    <label htmlFor={\"input\" + field}>{displayName}</label>\n                    <input type=\"text\" value={this.state[field]} onChange={this.handleChange} className=\"form-control\" placeholder={\"input \" + field} id={field} data-field={field}/>\n                </div>);\n            }\n            else if(obj.type.localeCompare(\"object\")==0){\n                //Handle refs by doing a lookup.\n                inputFields.push(<div key={field}><label htmlFor={\"input\"+field}>{displayName}</label>\n                    <Select value={this.state[field]} multi={false} handleSelect={this.handleSelect} field={field} target={obj.$ref} list={this.props.allSchemas}/>\n                </div>);\n            }\n            else if(obj.type.localeCompare(\"array\")==0) {\n                inputFields.push(<div key={field}><label htmlFor={\"input\"+field}>{displayName}</label>\n                    <div className=\"form-inline\">\n                        <div className=\"form-group\">\n                            <Select value={this.state[field]} multi={true} handleSelect={this.handleSelect} field={field} target={obj.$ref} list={this.props.allSchemas}/>\n                        </div>\n                    </div>\n                </div>);\n            }\n        }\n\n        return inputFields;\n    }\n\n    //@Todo externalise to db object\n    handleSubmit(event){\n        let db = new PouchDB(OBJECT_DB);\n\n        this.state.type = this.props.schema.id;\n\n        console.log(\"Writing new Object: \"+JSON.stringify(this.state));\n\n        db.post(this.state, function(err, res){\n            if(err)\n                console.error(err);\n            else{\n                $(\"#\"+this.props.dialogId).dialog(\"close\");\n\n                this.initiateState();\n\n                //Callback\n                this.props.next();\n            }\n        }.bind(this));\n    }\n\n    handleChange(event){\n        const field = [$(\"#\"+event.target.id).data(\"field\")];\n\n        console.debug(\"Value change in \"+field+\", updating state\");\n\n        //let obj = this.state.object;\n        //obj[field] = event.target.value;\n\n        this.setState({\n            [field]:event.target.value\n        });\n\n        console.log(\"New State: \"+JSON.stringify(this.state));\n    }\n\n    handleSelect(event){\n        const field = [$(\"#\"+event.target.id).data(\"field\")];\n        console.debug(\"Value change in \"+field+\", updating state\");\n\n        const options = event.target.selectedOptions;\n\n        let list = [];\n        for(let x of options){\n            const title = x.attributes[\"data-title\"].value;\n            const type = x.attributes[\"data-type\"].value;\n\n            list.push(type);\n\n            let obj={};\n            obj.title = title;\n            obj.type = type;\n\n            this.list.push(obj);\n\n        }\n\n        //let obj = this.state.object;\n        //obj[field] = list;\n        //console.log(\"Setting new Object State: \"+JSON.stringify(obj));\n\n        this.setState({\n            [field]: list\n        });\n\n        console.log(\"New State: \"+JSON.stringify(this.state));\n        console.log(\"New List: \"+JSON.stringify(this.list));\n    }\n}"]}
{"version":3,"sources":["../../../js/forms/DynamicObjectForm.jsx"],"names":["DynamicObjectForm","props","buildInputForm","bind","handleSelect","handleSubmit","handleChange","state","object","list","fields","form","console","log","JSON","stringify","schema","inputFields","properties","field","debug","obj","type","localeCompare","push","allSchemas","event","db","PouchDB","OBJECT_DB","title","post","err","res","error","$","dialogId","dialog","setState","next","target","id","data","value","options","selectedOptions","x","attributes","React","Component"],"mappings":"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","file":"DynamicObjectForm.js","sourcesContent":["class DynamicObjectForm extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.buildInputForm = this.buildInputForm.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.state = {\n            object:{}\n        };\n\n        this.list = [];\n\n    }\n\n\n    render() {\n        let fields = this.buildInputForm();\n        let form = <form action=\"#\" onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n                {fields}\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n        </form>;\n\n        return form;\n    }\n\n\n    buildInputForm(){\n        console.log(\"Building Input Form for \"+JSON.stringify(this.props.schema));\n\n        let inputFields = [];\n        let props = this.props.schema.properties;\n\n        //@Todo this needs to support all JSON Schema type fields\n\n        for(let field in props){\n            console.debug(JSON.stringify(props[field]));\n\n            let obj = props[field];\n\n            if(obj.type.localeCompare(\"string\")==0) {\n                inputFields.push(<div key={field}>\n                    <label htmlFor={\"input\" + field}>{field}</label>\n                    <input type=\"text\" value={this.state[field]} onChange={this.handleChange} className=\"form-control\" placeholder={\"input \" + field} id={field} data-field={field}/>\n                </div>);\n            }\n            else if(obj.type.localeCompare(\"object\")==0){\n\n            }\n            else if(obj.type.localeCompare(\"array\")==0) {\n                inputFields.push(<div key={field}><label htmlFor={\"input\"+field}>{field}</label>\n                    <div className=\"form-inline\">\n                        <div className=\"form-group\">\n                            <Select value={this.state.object[field]} multi={true} handleSelect={this.handleSelect} field={field} list={this.props.allSchemas}/>\n                        </div>\n                    </div>\n                </div>);\n            }\n        }\n\n        return inputFields;\n    }\n\n    //@ToDo handle database submission...\n    handleSubmit(event){\n        let db = new PouchDB(OBJECT_DB);\n\n        this.state.object.title = this.props.schema.title;\n\n        console.log(\"Writing new Object: \"+JSON.stringify(this.state.object));\n\n        db.post(this.state.object, function(err, res){\n            if(err)\n                console.error(err);\n            else{\n                $(\"#\"+this.props.dialogId).dialog(\"close\");\n\n                let obj = {};\n                this.setState({\n                    object:obj\n                });\n\n                //Callback\n                this.props.next();\n            }\n        }.bind(this));\n\n    }\n\n    handleChange(event){\n        const field = [$(\"#\"+event.target.id).data(\"field\")];\n\n        this.state.object[field]= event.target.value;\n    }\n\n    handleSelect(event){\n        const field = [$(\"#\"+event.target.id).data(\"field\")];\n\n        const options = event.target.selectedOptions;\n\n        let list = [];\n        for(let x of options){\n            const id = x.attributes[\"data-id\"].value;\n\n            console.debug(\"Addding Object \"+id +\" to new definition\");\n\n            list.push(id);\n        }\n\n        let obj = this.state.object;\n        obj[field] = list;\n        console.log(\"Setting new Object State: \"+JSON.stringify(obj));\n        this.setState({\n            object: obj\n        });\n    }\n}"]}
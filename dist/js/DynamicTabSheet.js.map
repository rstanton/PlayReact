{"version":3,"sources":["../../js/DynamicTabSheet.jsx"],"names":["DynamicTabSheet","props","componentDidMount","bind","getObjectTypes","state","tabs","tabContent","db","PouchDB","SCHEMA_DB","setState","query","err","res","console","error","tbs","content","rows","map","schema","debug","JSON","stringify","push","key","_id","title","React","Component"],"mappings":";;;;;;;;;;IAAMA,e;;;AACF,6BAAYC,KAAZ,EAAkB;AAAA;;AAAA,sIACRA,KADQ;;AAEd,cAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,OAAzB;AACA,cAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,OAAtB;;AAEA;AACA,cAAKE,KAAL,GAAa;AACTC,kBAAK,EADI;AAETC,wBAAW;AAFF,SAAb;AANc;AAUjB;;;;4CAEkB;AACf,iBAAKH,cAAL;AACH;;;iCAEO;AACJ,mBAAO;AAAA;AAAA,kBAAK,IAAG,MAAR;AACH;AAAA;AAAA,sBAAI,WAAU,cAAd,EAA6B,MAAK,SAAlC;AACK,yBAAKC,KAAL,CAAWC;AADhB,iBADG;AAKH;AAAA;AAAA,sBAAK,WAAU,aAAf;AACK,yBAAKD,KAAL,CAAWE;AADhB;AALG,aAAP;AASH;;AAED;;;;;;yCAGgB;AACZ,gBAAIC,KAAK,IAAIC,OAAJ,CAAYC,SAAZ,CAAT;;AAEA,iBAAKC,QAAL,CAAc;AACVL,sBAAK,EADK;AAEVC,4BAAW;AAFD,aAAd;;AAKAC,eAAGI,KAAH,CAAS,gBAAT,EAA2B,UAASC,GAAT,EAAcC,GAAd,EAAkB;AACzC,oBAAGD,GAAH,EAAO;AACHE,4BAAQC,KAAR,CAAcH,GAAd;AACH,iBAFD,MAGI;AACA,wBAAII,MAAM,EAAV;AACA,wBAAIC,UAAU,EAAd;;AAEA;AACAJ,wBAAIK,IAAJ,CAASC,GAAT,CAAa,UAASC,MAAT,EAAgB;AACzBN,gCAAQO,KAAR,CAAc,wBAAsBC,KAAKC,SAAL,CAAeH,MAAf,CAApC;;AAEA;AACAJ,8BAAM,KAAKZ,KAAL,CAAWC,IAAjB;AACAW,4BAAIQ,IAAJ,CAAS;AAAA;AAAA,8BAAI,KAAKJ,OAAOK,GAAP,CAAWC,GAApB,EAAyB,MAAK,cAA9B;AAA6C;AAAA;AAAA,kCAAG,MAAM,MAAIN,OAAOK,GAAP,CAAWC,GAAxB,EAA6B,iBAAc,UAA3C,EAAsD,MAAK,KAA3D,EAAiE,eAAY,KAA7E;AAAoFN,uCAAOK,GAAP,CAAWE;AAA/F;AAA7C,yBAAT;;AAEA;AACAV,kCAAU,KAAKb,KAAL,CAAWE,UAArB;AACAW,gCAAQO,IAAR,CAAa;AAAA;AAAA,8BAAK,KAAKJ,OAAOK,GAAP,CAAWC,GAArB,EAA0B,MAAK,UAA/B,EAA0C,WAAU,UAApD,EAA+D,IAAIN,OAAOK,GAAP,CAAWC,GAA9E;AACT,gDAAC,aAAD,IAAe,IAAIN,OAAOK,GAAP,CAAWC,GAA9B,EAAmC,MAAM,KAAKvB,cAA9C;AADS,yBAAb;AAIH,qBAbY,CAaXD,IAbW,CAaN,IAbM,CAAb;;AAeAc,wBAAIQ,IAAJ,CAAS;AAAA;AAAA,0BAAI,KAAI,QAAR,EAAiB,MAAK,cAAtB;AAAqC;AAAA;AAAA,8BAAG,MAAM,SAAT,EAAoB,iBAAc,UAAlC,EAA6C,MAAK,KAAlD,EAAwD,eAAY,KAApE;AAAA;AAAA;AAArC,qBAAT;AACAP,4BAAQO,IAAR,CAAa;AAAA;AAAA,0BAAK,KAAK,QAAV,EAAoB,MAAK,UAAzB,EAAoC,WAAU,UAA9C,EAAyD,IAAG,QAA5D;AACT,4CAAC,YAAD,IAAc,MAAM,KAAKrB,cAAzB,GADS;AAET,4CAAC,aAAD,IAAe,MAAM,KAAKA,cAA1B;AAFS,qBAAb;;AAKhB;;;AAGgB,yBAAKO,QAAL,CAAc;AACVL,8BAAKW,GADK;AAEVV,oCAAYW;AAFF,qBAAd;AAIH;AACJ,aAtC0B,CAsCzBf,IAtCyB,CAsCpB,IAtCoB,CAA3B;AAuCH;;;;EA/EyB0B,MAAMC,S","file":"DynamicTabSheet.js","sourcesContent":["class DynamicTabSheet extends React.Component{\n    constructor(props){\n        super(props);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.getObjectTypes = this.getObjectTypes.bind(this);\n\n        //tabs the HTML for the tabs, and tabContent the HTML for the tab bodies\n        this.state = {\n            tabs:[],\n            tabContent:[]\n        }\n    }\n\n    componentDidMount(){\n        this.getObjectTypes();\n    }\n\n    render(){\n        return <div id=\"tabs\">\n            <ul className=\"nav nav-tabs\" role=\"tablist\">\n                {this.state.tabs}\n            </ul>\n\n            <div className=\"tab-content\">\n                {this.state.tabContent}\n            </div>\n        </div>\n    }\n\n    /**\n     * Get the objects types from the DB, assign the names and the IDs to some elements by updating the state.\n     */\n    getObjectTypes(){\n        let db = new PouchDB(SCHEMA_DB);\n\n        this.setState({\n            tabs:[],\n            tabContent:[]\n        });\n\n        db.query(\"Schema/by_name\", function(err, res){\n            if(err){\n                console.error(err);\n            }\n            else{\n                let tbs = [];\n                let content = [];\n\n                //Loop each of the Schema objects returned from the Schema DB query\n                res.rows.map(function(schema){\n                    console.debug(\"Creating Sheet for \"+JSON.stringify(schema));\n\n                    //Add a tab\n                    tbs = this.state.tabs;\n                    tbs.push(<li key={schema.key._id} role=\"presentation\"><a href={\"#\"+schema.key._id} aria-controls=\"diagrams\" role=\"tab\" data-toggle=\"tab\">{schema.key.title}</a></li>);\n\n                    //add tab content\n                    content = this.state.tabContent;\n                    content.push(<div key={schema.key._id} role=\"tabpanel\" className=\"tab-pane\" id={schema.key._id}>\n                        <GenericLister id={schema.key._id} next={this.getObjectTypes}/>\n                    </div>);\n\n                }.bind(this));\n\n                tbs.push(<li key=\"schema\" role=\"presentation\"><a href={\"#schema\"} aria-controls=\"diagrams\" role=\"tab\" data-toggle=\"tab\">Objects</a></li>);\n                content.push(<div key={\"schema\"} role=\"tabpanel\" className=\"tab-pane\" id=\"schema\">\n                    <SchemaLister next={this.getObjectTypes} />\n                    <NewSchemaForm next={this.getObjectTypes}/>\n                </div>);\n\n/**                tbs.push(<li key=\"diagrams\" role=\"presentation\"><a href={\"#diagrams\"} aria-controls=\"diagrams\" role=\"tab\" data-toggle=\"tab\">Diagrams</a></li>);\n                content.push(<div key=\"diagrams\" role=\"tabpanel\" className=\"tab-pane\" id=\"diagrams\"><DiagramLister/></div>);*/\n\n                this.setState({\n                    tabs:tbs,\n                    tabContent: content\n                });\n            }\n        }.bind(this))\n    }\n}"]}
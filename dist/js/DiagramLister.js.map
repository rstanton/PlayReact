{"version":3,"sources":["../../js/DiagramLister.jsx"],"names":["DiagramLister","props","state","list","getDiagrams","bind","displayDiagram","setState","diagramDB","query","err","res","console","error","rows","map","key","id","n","length","get","doc","arr","push","_id","diagramName","appVendor","delete","$","addClass","removeClass","log","remove","response","React","Component"],"mappings":"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","file":"DiagramLister.js","sourcesContent":["//this class will iterate through all the diagrams in the database...\nclass DiagramLister extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            list:[]\n        };\n\n        this.getDiagrams = this.getDiagrams.bind(this);\n        this.displayDiagram = this.displayDiagram.bind(this);\n    }\n\n    componentDidMount(){\n        this.getDiagrams();\n    }\n\n    render() {\n        return <div>\n            <DiagramForm view={this.getDiagrams.bind(this)} id=\"DiagramModal\" title=\"Create A New Diagram\" body=\"\"/>\n            <table className=\"table table-striped\">\n                <thead>\n                <tr><th>#</th><th>Name</th><th>Author</th><th>\n                    <span onClick={() => this.getDiagrams()} className=\"glyphicon glyphicon-refresh\" aria-hidden=\"true\"></span>\n                    <span data-toggle=\"modal\" data-target=\"#DiagramModal\" className=\"glyphicon glyphicon-plus-sign\" aria-hidden=\"true\"></span>\n                </th></tr>\n                </thead>\n                <tbody>\n                    {this.state.list}\n                </tbody>\n            </table>\n        </div>\n    }\n\n    getDiagrams(){\n\n        //Clear the current state\n        this.setState({\n            list:[]\n        });\n\n        //Get all documents in the database index\n        diagramDB.query(\"diagrams/by_name\", function(err, res){\n            if(err)\n                console.error(err);\n\n            //get a list of all the ids\n            var list = [];\n            list = res.rows.map(function(key){\n                return key.id;\n            });\n\n            for(let n=0;n<list.length; n++) {\n                diagramDB.get(list[n], function (err, doc) {\n                    if (err)\n                        console.error(err);\n\n                    //get the current array and add a new entry on the end\n                    var arr = this.state.list;\n                    arr.push(<tr key={doc._id}><td>{doc._id}</td><td>{doc.diagramName}</td><td>{doc.appVendor}</td><td>\n                        <a href=\"#\" title=\"Delete Diagram\"><span onClick={() => this.delete(doc._id)} className=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span></a>\n                        <a href=\"#\" title=\"Edit Diagram\"><span onClick={() => this.displayDiagram(doc._id)} className=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span></a>\n                    </td></tr>);\n\n                    //save to the state\n                    this.setState({list: arr});\n\n                }.bind(this));\n            }\n        }.bind(this));\n    }\n\n    displayDiagram(id){\n        $(\"#tabs\").addClass(\"hidden\");\n        $(\"#canvas\").removeClass(\"hidden\");\n        $(\"#canvas\").addClass(\"show\");\n    }\n    /**\n     * Removes the application from the database that is associated with the specified application ID then refreshes the view state based on the updated DB contents\n     * @param id\n     */\n    delete(id){\n        console.log(\"Delete Request for \"+id);\n\n        diagramDB.get(id, function(err, doc){\n            diagramDB.remove(doc, function(err, response){\n                if(err)\n                    console.error(err);\n\n                this.getDiagrams();\n\n            }.bind(this));\n        }.bind(this));\n    }\n\n}"]}